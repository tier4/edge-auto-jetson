- name: Fix python interpreter version to 3
  set_fact:
    ansible_python_interpreter: /usr/bin/python3.6

- name: Setup dependencies
  block:
    - name: Apt install
      ansible.builtin.apt:
        name:
          - curl=7.58.0-2ubuntu3.16
          - wget=1.19.4-1ubuntu2.2 
          - gnupg=2.2.4-1ubuntu1.6
          - gnupg2=2.2.4-1ubuntu1.6
          - lsb-release=9.20170808ubuntu1
          - ca-certificates=20230311ubuntu0.18.04.1
          - software-properties-common=0.96.24.32.22
          - apt-transport-https=1.6.17
        install_recommends: false
        update_cache: true
    - name: Add ROS 2 source list
      shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
    - name: Download gpg key
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/ros/rosdistro/master/ros.key
        dest: /usr/share/keyrings/ros-archive-keyring.gpg
        follow_redirects: all
    - name: Apt install
      ansible.builtin.apt:
        name:
          - nvidia-jetpack=4.6-b199
          - nvidia-opencv=4.6-b199
          - build-essential=12.4ubuntu1
          - cmake=3.10.2-1ubuntu2.18.04.2
          - git=1:2.17.1-1ubuntu0.8
          - libbullet-dev=2.87+dfsg-2
          - libpython3-dev=3.6.7-1~18.04
          - python3-wheel=0.30.0-0.2ubuntu0.1
          - python3-flake8=3.5.0-1
          - python3-pip=9.0.1-2.3~ubuntu1.18.04.8
          - python3-numpy=1:1.13.3-2ubuntu1
          - python3-pytest-cov=2.5.1-1
          - python3-setuptools=39.0.1-2ubuntu0.1
          - libasio-dev=1:1.10.8-1
          - libtinyxml2-dev=6.0.0+dfsg-1
          - libcunit1-dev=2.1-3-dfsg-2
          - libflann-dev=1.9.1+dfsg-2
        install_recommends: false
        update_cache: true
  become: true

- name: add CUDA into PATH
  set_fact:
    environment:
      PATH: /usr/local/cuda/bin:{{ ansible_env.PATH }}

- name: Python parts
  ansible.builtin.pip:
    name:
      - wheel==0.37.1
      - argcomplete==3.1.2
      - flake8-blind-except==0.2.1
      - flake8-builtins==2.0.0
      - flake8-class-newline==1.6.0
      - flake8-comprehensions==3.7.0
      - flake8-deprecated==1.3
      - flake8-docstrings==1.6.0
      - flake8-import-order==0.18.2
      - flake8-quotes==3.4.0
      - pytest-repeat==0.9.1
      - pytest-rerunfailures==10.3
      - pytest==7.0.1
      - pybind11-global==2.11.1
      - importlib_resources==5.4.0
      - rosdep==0.25.1
      - vcstool==0.3.0
      - colcon-common-extensions==0.3.0
      - rosinstall-generator==0.1.23
      - empy==3.3.4
    extra_args: -U
  become: true # need to sudo privilege to install packages globally

- name: Prepare for dependencies' source build
  block:
    - name: Define directory name
      set_fact:
        source_build_dir: "{{ ansible_env.HOME }}/source_builds"
    - name: Create directory
      ansible.builtin.file:
        path: "{{ source_build_dir }}"
        state: directory

- name: Check Boost build directory existence
  ansible.builtin.stat:
    path: "{{ source_build_dir }}/boost_1_74_0"
  register: boost_build_dir_exist

- name: Build and install Boost
  block:
    - name: "{{ block_name }}: Download and extract source"
      ansible.builtin.unarchive:
        src: https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/boost_1_74_0.tar.gz
        dest: "{{ source_build_dir }}"
        remote_src: true
    - name: "{{ block_name }}: Build boost"
      shell: ./bootstrap.sh --prefix=/usr/local --with-python=python3 && ./b2 install -j7
      args:
        chdir: "{{ source_build_dir }}/boost_1_74_0"
      become: true
  vars:
    block_name: Boost
  when: not boost_build_dir_exist.stat.exists

- name: Check PCL build directory existence
  ansible.builtin.stat:
    path: "{{ source_build_dir }}/pcl"
  register: pcl_build_dir_exist

- name: Build and install PCL
  block:
    - name: "{{ block_name }}: Download and extract source"
      ansible.builtin.unarchive:
        src: https://github.com/PointCloudLibrary/pcl/releases/download/pcl-1.12.1/source.tar.gz
        dest: "{{ source_build_dir }}"
        remote_src: true
    - set_fact:
        pcl_build_dir: "{{ source_build_dir }}/pcl/build"
    - name: "{{ block_name }}: Create build directory"
      ansible.builtin.file:
        path: "{{ pcl_build_dir }}"
        state: directory
    - name: "{{ block_name }}: cmake"
      shell: cmake -DCMAKE_BUILD_TYPE=Release ..
      args:
        chdir: "{{ pcl_build_dir }}"
      environment:
        PATH: /usr/local/cuda/bin:{{ ansible_env.PATH }}
    - name: "{{ block_name }}: build"
      shell: make -j7 install
      args:
        chdir: "{{ pcl_build_dir }}"
      become: true
  vars:
    block_name: PCL
  when: not pcl_build_dir_exist.stat.exists

- name: Check fmt build directory existence
  ansible.builtin.stat:
    path: "{{ source_build_dir }}/fmt-8.1.1"
  register: fmt_build_dir_exist

- name: Build and install fmt
  block:
    - name: "{{ block_name }}: Download and extract source"
      ansible.builtin.unarchive:
        src: https://github.com/fmtlib/fmt/archive/refs/tags/8.1.1.tar.gz
        dest: "{{ source_build_dir }}"
        remote_src: true
    - set_fact:
        fmt_build_dir: "{{ source_build_dir }}/fmt-8.1.1/build"
    - name: "{{ block_name }}: Create build directory"
      ansible.builtin.file:
        path: "{{ fmt_build_dir }}"
        state: directory
    - name: "{{ block_name }}: cmake"
      shell: cmake -DBUILD_SHARED_LIBS=TRUE ..
      args:
        chdir: "{{ fmt_build_dir }}"
    - name: "{{ block_name }}: build"
      shell: make -j7 install
      args:
        chdir: "{{ fmt_build_dir }}"
      become: true
  vars:
    block_name: fmt
  when: not fmt_build_dir_exist.stat.exists

- name: Check Range-v3 build directory existence
  ansible.builtin.stat:
    path: "{{ source_build_dir }}/range-v3"
  register: range_v3_build_dir_exist

- name: Build and install Range-v3
  block:
    - name: "{{ block_name }}: Download source"
      ansible.builtin.git:
        repo: https://github.com/ericniebler/range-v3.git
        dest: "{{ source_build_dir }}/range-v3"
        depth: 1
        version: 0.11.0
    - set_fact:
        range_v3_build_dir: "{{ source_build_dir }}/range-v3/build"
    - name: "{{ block_name }}: Create build directory"
      ansible.builtin.file:
        path: "{{ range_v3_build_dir }}"
        state: directory
    - name: "{{ block_name }}: cmake"
      shell: cmake -DCMAKE_BUILD_TYPE=Release -DRANGE_V3_TESTS=Off -DRANGE_V3_EXAMPLES=Off ..
      args:
        chdir: "{{ range_v3_build_dir }}"
    - name: "{{ block_name }}: build"
      shell: make -j7 install
      args:
        chdir: "{{ range_v3_build_dir }}"
      become: true
  vars:
    block_name: Range-v3
  when: not range_v3_build_dir_exist.stat.exists

- name: Check OpenCV build directory existence
  ansible.builtin.stat:
    path: "{{ source_build_dir }}/jetson-containers"
  register: opencv_build_dir_exist

- name: Check YAML build directory existence
  ansible.builtin.stat:
    path: "{{ source_build_dir }}/yaml-cpp"
  register: yaml_cpp_build_dir_exist

- name: Build and install YAML
  block:
    - name: "{{ block_name }}: Download source"
      ansible.builtin.git:
        repo: https://github.com/jbeder/yaml-cpp.git
        dest: "{{ source_build_dir }}/yaml-cpp"
        version: yaml-cpp-0.6.0
    - set_fact:
        yaml_cpp_build_dir: "{{ source_build_dir }}/yaml-cpp/build"
    - name: "{{ block_name }}: Create build directory"
      ansible.builtin.file:
        path: "{{ yaml_cpp_build_dir }}"
        state: directory
    - name: "{{ block_name }}: cmake"
      shell: cmake -DBUILD_SHARED_LIBS=ON ..
      args:
        chdir: "{{ yaml_cpp_build_dir }}"
    - name: "{{ block_name }}: build"
      shell: make -j7 install
      args:
        chdir: "{{ yaml_cpp_build_dir }}"
      become: true
  vars:
    block_name: YAML
  when: not yaml_cpp_build_dir_exist.stat.exists

- name: Upgrade CMake
  block:
    # Follow directions here: https://apt.kitware.com/
    - name: "{{ block_name }}: update gpg key"
      shell: wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
    - name: "{{ block_name }}: update repository info"
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ {{ ansible_distribution_release }} main
        filename: kitware
    - name: "{{ block_name }}: apt update"
      ansible.builtin.apt:
        update_cache: true
        state: present
    - name: "{{ block_name }}: install newer cmake"
      ansible.builtin.apt:
        name: cmake
        install_recommends: false
        state: latest
  become: true
  vars:
    block_name: Upgrade CMake

- name: update GCC
  block:
    - name: "{{ block_name }}: update repository info"
      ansible.builtin.apt_repository:
        repo: ppa:ubuntu-toolchain-r/test
    - name: "{{ block_name }}: install gcc11"
      ansible.builtin.apt:
        name:
          - gcc-11
          - g++-11
        install_recommends: false
        update_cache: true
    - name: "{{ block_name }}: set gcc11 as default"
      community.general.alternatives:
        name: gcc
        path: /usr/bin/gcc-11
        link: /usr/bin/gcc
        state: selected
        subcommands:
          - name: g++
            path: /usr/bin/g++-11
            link: /usr/bin/g++

  become: true
  vars:
    block_name: update GCC

- name: Check ROS build directory existence
  ansible.builtin.stat:
    path: /opt/ros/{{ ros_distro }}
  register: ros_build_dir_exist

- name: Build ROS
  block:
    - set_fact:
        ros_base_dir: /opt/ros/{{ ros_distro }}
    - set_fact:
        ros_src_dir: "{{ ros_base_dir }}/src"
    - name: "{{ block_name }}: Create base directory"
      ansible.builtin.file:
        path: "{{ ros_base_dir }}"
        state: directory
      become: true
    - name: "{{ block_name }}: Create soruce directory"
      ansible.builtin.file:
        path: "{{ ros_base_dir }}/src"
        state: directory
      become: true
    - name: "{{ block_name }}: copy repository list to target ddirectory"
      ansible.builtin.copy:
        src: ros_packages.txt
        dest: "{{ ros_base_dir }}/ros2.{{ ros_distro }}.ros_base.rosinstall"
      become: true
    - name: "{{ block_name }}: clone all repositories via vcs"
      shell: vcs import src < ros2.{{ ros_distro }}.ros_base.rosinstall
      args:
        chdir: "{{ ros_base_dir }}"
      become: true
    - name: "{{ block_name }}: remove ament_cmake for update"
      ansible.builtin.file:
        path: "{{ ros_src_dir }}/ament_cmake"
        state: absent
      become: true
    - name: "{{ block_name }}: clone ament_cmake from git"
      ansible.builtin.git:
        repo: https://github.com/ament/ament_cmake
        dest: "{{ ros_src_dir }}/ament_cmake"
        version: humble
      become: true
    - name: "{{ block_name }}: clone diagnostics from git"
      ansible.builtin.git:
        repo: https://github.com/ros/diagnostics
        dest: "{{ ros_src_dir }}/diagnostics"
        version: ros2
      become: true
    - name: "{{ block_name }}: remove rmw_connextdds entry from rmw_implementation"
      ansible.builtin.replace:
        path: "{{ ros_src_dir }}/rmw_implementation/package.xml"
        regexp: .*rmw_connextdds.*\n
      become: true
    - stat:
        path: /etc/ros/rosdep/sources.list.d/20-default.list
      register: ros_sources_list_file
    - name: "{{ block_name }}: rosdep init"
      shell: rosdep init
      become: true
      when: not ros_sources_list_file.stat.exists
    - name: "{{ block_name }}: rosdep update"
      shell: rosdep update
      become: true
    - name: rosdep install
      shell: rosdep install -y --ignore-src --from-paths src --rosdistro humble --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv"
      args:
        chdir: "{{ ros_base_dir }}"
      become: true
    - name: "{{ block_name }}: correct file list under /var/lib/apt/lists"
      ansible.builtin.find:
        paths: /var/lib/apt/lists
        hidden: true
        recurse: true
        file_type: any
      register: file_under_var_lib_apt_lists
    - name: "{{ block_name }}: remove all file under /var/lib/apt/lists"
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ file_under_var_lib_apt_lists.files }}"
      become: true
    - name: "{{ block_name }}: apt-get clean"
      ansible.builtin.apt:
        clean: true
      become: true
    - name: "{{ block_name }}: apt-get purge pybind11-dev"
      ansible.builtin.apt:
        name: pybind11-dev
        purge: true
      become: true
    - name: "{{ block_name }}: install pybind11-global"
      ansible.builtin.pip:
        name: pybind11-global==2.11.1
        extra_args: -U
      become: true
    - name: "{{ block_name }}: apt-get purge libyaml-cpp-dev"
      ansible.builtin.apt:
        name: libyaml-cpp-dev
        purge: true
      become: true
    - name: "{{ block_name }}: colcon build"
      shell: colcon build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DPython3_EXECUTABLE=$(which python3.6)
      args:
        chdir: "{{ ros_base_dir }}"
      become: true
  vars:
    block_name: Build ROS
  when: not ros_build_dir_exist.stat.exists

- name: Downgrade GCC as version 11 is too high for old CUDA version that is used in L4T
  block:
    - name: "{{ block_name }}: install gcc-8"
      ansible.builtin.apt:
        name:
          - gcc-8
          - g++-8
        update_cache: true
    - name: "{{ block_name }}: set gcc-8 as default"
      community.general.alternatives:
        name: gcc
        path: /usr/bin/gcc-8
        link: /usr/bin/gcc
        state: selected
        subcommands:
          - name: g++
            path: /usr/bin/g++-8
            link: /usr/bin/g++
  become: true
  vars:
    block_name: Downgrade gcc to 8

- name: Add sourcing command in user's bashrc
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    state: present
    marker: "# {mark} ros2"
    block: |
      source {{ ros_base_dir }}/install/setup.bash
  when: not ros_build_dir_exist.stat.exists
