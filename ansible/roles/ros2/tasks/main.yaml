- name: Confirm locale
  block:
    - name: Generate locale files
      ansible.builtin.command:
        cmd: locale-gen en_US en_US.UTF-8
    - name: Update locale settings
      ansible.builtin.command:
        cmd: update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
  become: true

- name: Fix python interpreter version to 3
  set_fact:
    ansible_python_interpreter: /usr/bin/python3.8

- name: Prepare Jetson scripts
  block:
    - name: Define directory name
      set_fact:
        jetson_script_dir: "{{ ansible_env.HOME }}/jetson_scripts"
    - name: Create directory
      ansible.builtin.file:
        path: "{{ jetson_script_dir }}"
        state: directory
    - name: Define file name
      set_fact:
        opencv_install_deps_script: "{{ jetson_script_dir }}/opencv_install_deps.sh"
    - name: Define file name
      set_fact:
        opencv_install_script: "{{ jetson_script_dir }}/opencv_install.sh"
    - name: Define file name
      set_fact:
        ros2_build_script: "{{ jetson_script_dir }}/ros2_build.sh"
    - name: Download OpenCV deps script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dusty-nv/jetson-containers/L4T-R35.3.1/scripts/opencv_install_deps.sh
        dest: "{{ opencv_install_deps_script }}"
    - name: Make OpenCV deps script executable
      ansible.builtin.file:
        dest: "{{ opencv_install_deps_script }}"
        mode: u+x
    - name: Download OpenCV install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dusty-nv/jetson-containers/L4T-R35.3.1/scripts/opencv_install.sh
        dest: "{{ opencv_install_script }}"
    - name: Make OpenCV install script executable
      ansible.builtin.file:
        dest: "{{ opencv_install_script }}"
        mode: u+x
    - name: Download ROS2 Humble install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dusty-nv/jetson-containers/L4T-R35.3.1/scripts/ros2_build.sh
        dest: "{{ ros2_build_script }}"
    - name: Make ROS2 Humble install script executable
      ansible.builtin.file:
        dest: "{{ ros2_build_script }}"
        mode: u+x

- name: Install dependencies
  block:
    - name: Install OpenCV deps
      ansible.builtin.command:
        cmd: "{{ opencv_install_deps_script }}"
    - name: Install PCL deps
      ansible.builtin.apt:
        name:
          - libflann-dev
          - libboost-filesystem-dev
          - libboost-date-time-dev
          - libboost-iostreams-dev
          - libvtk7-dev
        install_recommends: false
        update_cache: true
  become: true

- name: Install PCL
  block:
    - name: Define directory name
      set_fact:
        pcl_directory: "{{ ansible_env.HOME }}/pcl"
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ pcl_directory }}"
        state: directory
    - name: Download and extract PCL 1.12.1 source
      ansible.builtin.unarchive:
        src: https://github.com/PointCloudLibrary/pcl/releases/download/pcl-1.12.1/source.tar.gz
        dest: "{{ pcl_directory }}"
        remote_src: yes
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ pcl_directory }}/pcl/build"
        state: directory
    - name: Run cmake
      ansible.builtin.command:
        cmd: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc ..
        chdir: "{{ pcl_directory }}/pcl/build"
      environment:
        PATH: "/usr/local/cuda/bin:{{ ansible_env.PATH }}"
    - name: Install PCL
      ansible.builtin.command:
        cmd: make -j7 install
        chdir: "{{ pcl_directory }}/pcl/build"
      become: true

- name: Install OpenCV
  ansible.builtin.command:
    cmd: "{{ opencv_install_script }} https://nvidia.box.com/shared/static/2hssa5g3v28ozvo3tc3qwxmn78yerca9.gz OpenCV-4.5.0-aarch64.tar.gz"
  become: true

- name: Install range-v3 0.11.0
  block:
    - name: Define directory name
      set_fact:
        range_v3_directory: "{{ ansible_env.HOME }}/range-v3"
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ range_v3_directory }}"
        state: directory
    - name: Download and extract range-v3 0.11.0 source
      ansible.builtin.unarchive:
        src: https://github.com/ericniebler/range-v3/archive/refs/tags/0.11.0.tar.gz
        dest: "{{ range_v3_directory }}"
        remote_src: yes
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ range_v3_directory }}/range-v3-0.11.0/build"
        state: directory
    - name: Run cmake
      ansible.builtin.command:
        cmd: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc ..
        chdir: "{{ range_v3_directory }}/range-v3-0.11.0/build"
      environment:
        PATH: "/usr/local/cuda/bin:{{ ansible_env.PATH }}"
    - name: Install range-v3
      ansible.builtin.command:
        cmd: make -j7 install
        chdir: "{{ range_v3_directory }}/range-v3-0.11.0/build"
      become: true

- name: Build ROS2 Humble
  block:
    - name: Add the ROS deb repo to the apt sources list
      block:
        - name: Install apt packages
          ansible.builtin.apt:
            name:
              - curl
              - wget
              - gnupg2
              - lsb-release
              - ca-certificates
            install_recommends: false
            update_cache: true
        - name: Download ros.key
          ansible.builtin.command:
            cmd: "curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg"
        - name: "TODO: add name"
          ansible.builtin.command:
            cmd: 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null'
      become: true
    - name: Install apt packages
      ansible.builtin.apt:
        name:
          - apt-utils
          - build-essential
          - cmake
          - git
          - libbullet-dev
          - libpython3-dev
          - python3-flake8
          - python3-pip
          - python3-numpy
          - python3-pytest-cov
          - python3-rosdep
          - python3-setuptools
          - python3-vcstool
          - python3-rosinstall-generator
          - libasio-dev
          - libtinyxml2-dev
          - libcunit1-dev
          - libpugixml-dev
          - libgeographic-dev
          - libgtest-dev
          - libcgal-dev
        install_recommends: false
        update_cache: true
      become: true
    - name: Install pip packages
      ansible.builtin.pip:
        name:
          - colcon-common-extensions
          - catkin-pkg-modules
          - argcomplete
          - flake8-blind-except
          - flake8-builtins
          - flake8-class-newline
          - flake8-comprehensions
          - flake8-deprecated
          - flake8-docstrings
          - flake8-import-order
          - flake8-quotes
          - pytest-repeat
          - pytest-rerunfailures
          - pytest
          - scikit-build
          - cmake
        extra_args: "--upgrade --no-cache-dir"
    - name: Could NOT find Python3 workaround
      ansible.builtin.apt:
        name:
          - python3.9
          - libpython3.9*
        purge: true
        state: absent
      become: true
    - name: Create the ROS root directory and src directory
      ansible.builtin.file:
        path: "{{ ros_root_dir }}/src"
        state: directory
        recurse: true
      become: true
    - name: Download ROS packages
      ansible.builtin.shell:
        cmd: "rosinstall_generator --deps --rosdistro {{ ros_distro }} {{ ros_pkg }} launch_xml launch_yaml launch_testing launch_testing_ament_cmake demo_nodes_cpp demo_nodes_py example_interfaces camera_calibration_parsers camera_info_manager cv_bridge v4l2_camera vision_opencv vision_msgs image_geometry image_pipeline image_transport compressed_image_transport compressed_depth_image_transport pcl_msgs perception_pcl logging_demo udp_msgs angles diagnostics tf_transformations mrt_cmake_modules gtest_vendor grid_map filters nav2_msgs tf2-eigen ament_cmake_clang_format > {{ ros_root_dir }}/ros2.{{ ros_distro }}.{{ ros_pkg }}.rosinstall"
      become: true
    - name: Import packages to source directory
      ansible.builtin.shell:
        cmd: "vcs import src < ros2.humble.ros_base.rosinstall"
        chdir: "{{ ros_root_dir }}"
      become: true
    - name: Install dependencies with rosdep
      block:
        - name: Update rosdep
          ansible.builtin.shell:
            cmd: rosdep update
        - name: Run rosdep
          shell: "rosdep install -y --ignore-src --from-paths src --rosdistro humble --skip-keys 'libopencv-dev python3-catkin-pkg-modules python3-rosdistro-modules libignition-math6-dev rti-connext-dds-6.0.1 ignition-math6'"
          args:
            chdir: "{{ ros_root_dir }}"
    - name: Colcon build
      ansible.builtin.command:
        cmd: colcon build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=Release
        chdir: "{{ ros_root_dir }}"
      become: true
    - name: Remove build files
      block:
        - name: Remove .rosinstall file
          ansible.builtin.file:
            path: ros2.{{ ros_distro }}.{{ ros_pkg }}.rosinstall
            state: absent
        - name: Remove source directory
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/src"
            state: absent
        - name: Remove log directory
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/logs"
            state: absent
        - name: Remove build directory
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/build"
            state: absent
        - name: Remove .rosinstall files
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/*.rosinstall"
            state: absent
      become: true
    - name: Clean up apt
      block:
        - name: Remove
          ansible.builtin.file:
            path: /var/lib/apt/lists/*
            state: absent
        - name: Apt-get clean
          ansible.builtin.apt:
            clean: true
      become: true

- name: Install extra edge-auto-jetson dependency
  ansible.builtin.apt:
    name: libtheora-dev
    install_recommends: false
    update_cache: true
  become: true
