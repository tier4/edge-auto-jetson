# cSpell:disable
- name: Confirm locale
  block:
    - name: Generate locale files
      ansible.builtin.command:
        cmd: locale-gen en_US en_US.UTF-8
    - name: Update locale settings
      ansible.builtin.command:
        cmd: update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
  become: true

- name: Fix python interpreter version to 3
  set_fact:
    ansible_python_interpreter: /usr/bin/python3.10

- name: Prepare Jetson scripts
  block:
    - name: Define directory name
      set_fact:
        jetson_script_dir: "{{ ansible_env.HOME }}/jetson_scripts"
    - name: Create directory
      ansible.builtin.file:
        path: "{{ jetson_script_dir }}"
        state: directory
    - name: Define file name
      set_fact:
        opencv_install_deps_script: "{{ jetson_script_dir }}/opencv_install_deps.sh"
    - name: Define file name
      set_fact:
        opencv_build_script: "{{ jetson_script_dir }}/opencv_build.sh"
    - name: Define file name
      set_fact:
        ros2_build_script: "{{ jetson_script_dir }}/ros2_build.sh"
    - name: Define file name
      set_fact:
        opencv_patches: "{{ jetson_script_dir }}/opencv_patches.diff"
    - name: Download OpenCV deps script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dusty-nv/jetson-containers/L4T-R36.4.2/packages/opencv/install_deps.sh
        dest: "{{ opencv_install_deps_script }}"
    - name: Download OpenCV build script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dusty-nv/jetson-containers/L4T-R36.4.2/packages/opencv/build.sh
        dest: "{{ opencv_build_script }}"
    - name: Download OpenCV patches
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dusty-nv/jetson-containers/L4T-R36.4.2/packages/opencv/patches.diff
        dest: "{{ opencv_patches }}"
    - name: Download ROS2 Humble install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dusty-nv/jetson-containers/L4T-R36.4.2/packages/ros/ros2_build.sh
        dest: "{{ ros2_build_script }}"
    - name: Make OpenCV deps script executable
      ansible.builtin.file:
        dest: "{{ opencv_install_deps_script }}"
        mode: u+x
    - name: Make OpenCV build script executable
      ansible.builtin.file:
        dest: "{{ opencv_build_script }}"
        mode: u+x
    - name: Make ROS2 Humble install script executable
      ansible.builtin.file:
        dest: "{{ ros2_build_script }}"
        mode: u+x

- name: Install dependencies
  block:
    - name: Install PCL deps
      ansible.builtin.apt:
        name:
          - libflann-dev
          - libboost-filesystem-dev
          - libboost-date-time-dev
          - libboost-iostreams-dev
          - libvtk7-dev
          - clang-format-14
          - libusb-1.0-0-dev
          - qtbase5-dev
          - qtdeclarative5-dev
          - libpcap-dev
          - freeglut3-dev
        install_recommends: false
        update_cache: true
  become: true

- name: Install Boost
  block:
    - name: get boost from url
      ansible.builtin.get_url:
        url: https://archives.boost.io/release/1.82.0/source/boost_1_82_0.tar.gz
        dest: /tmp/boost_1_82_0.tar.gz
    - name: extract boost
      ansible.builtin.unarchive:
        src: /tmp/boost_1_82_0.tar.gz
        dest: /tmp
        remote_src: true
    - name: install boost
      ansible.builtin.shell:
        cmd: ./bootstrap.sh --prefix=/usr/local --with-python=python3 && sudo ./b2 install -j10
        chdir: /tmp/boost_1_82_0
      become: true

- name: Install PCL
  block:
    - name: Define directory name
      set_fact:
        pcl_directory: "{{ ansible_env.HOME }}/pcl"
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ pcl_directory }}"
        state: directory
    - name: Download and extract PCL 1.15.0 source
      ansible.builtin.unarchive:
        src: https://github.com/PointCloudLibrary/pcl/releases/download/pcl-1.15.0/source.tar.gz
        dest: "{{ pcl_directory }}"
        remote_src: true
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ pcl_directory }}/pcl/build"
        state: directory
    - name: Run cmake
      ansible.builtin.command:
        cmd: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc ..
        chdir: "{{ pcl_directory }}/pcl/build"
      environment:
        PATH: /usr/local/cuda/bin:{{ ansible_env.PATH }}
    - name: Install PCL
      ansible.builtin.command:
        cmd: make -j7 install
        chdir: "{{ pcl_directory }}/pcl/build"
      become: true
      ignore_errors: true

- name: Set OpenCV environment variables
  set_fact:
    opencv_version: "{{ OPENCV_VERSION | default('4.x') }}"
    opencv_python: "{{ OPENCV_PYTHON | default('4.x') }}"
    force_build: "{{ FORCE_BUILD | default('on') }}"
    cuda_arch_bin: "{{ CUDA_ARCH_BIN | default('8.7') }}" # Jetson AGX Orin

- name: Modify opencv_build.sh file
  ansible.builtin.replace:
    path: "{{ jetson_script_dir }}/opencv_build.sh"
    regexp: "bash /tmp/opencv/install_deps.sh"
    replace: "bash ./opencv_install_deps.sh"
  become: true

- name: Modify opencv_build.sh file
  ansible.builtin.replace:
    path: "{{ jetson_script_dir }}/opencv_build.sh"
    regexp: "/tmp/opencv/patches.diff"
    replace: "{{ jetson_script_dir }}/opencv_patches.diff"
  become: true

- name: Modify opencv_build.sh file
  ansible.builtin.replace:
    path: "{{ jetson_script_dir }}/opencv_build.sh"
    regexp: "ln -s"
    replace: "ln -s -f"
  become: true

- name: Modify opencv_build.sh file
  ansible.builtin.lineinfile:
    path: "{{ jetson_script_dir }}/opencv_build.sh"
    regexp: "git diff"
    state: absent
  become: true

- name: check function patch_opencv() in opencv_build.sh file
  lineinfile:
    path: "{{ jetson_script_dir }}/opencv_build.sh"
    regexp: '^function patch_opencv\(\)'
    line: "function patch_opencv()"
    state: present
  check_mode: yes
  register: function_line

- name: Modify function patch_opencv() opencv_build.sh file
  blockinfile:
    path: "{{ jetson_script_dir }}/opencv_build.sh"
    insertafter: '^function patch_opencv\(\)'
    block: |
      {
          [ -f opencv/modules/dnn/src/cuda4dnn/primitives/normalize_bbox.hpp ] && sed -i 's|weight != 1.0|(float)weight != 1.0f|' opencv/modules/dnn/src/cuda4dnn/primitives/normalize_bbox.hpp || true
          [ -f opencv/modules/dnn/src/cuda4dnn/primitives/region.hpp ] && sed -i 's|nms_iou_threshold > 0|(float)nms_iou_threshold > 0.0f|' opencv/modules/dnn/src/cuda4dnn/primitives/region.hpp || true
          [ -f opencv/modules/dnn/src/cuda4dnn/primitives/normalize_bbox.hpp ] && grep 'weight' opencv/modules/dnn/src/cuda4dnn/primitives/normalize_bbox.hpp 2>/dev/null || true
          [ -f opencv/modules/dnn/src/cuda4dnn/primitives/region.hpp ] && grep 'nms_iou_threshold' opencv/modules/dnn/src/cuda4dnn/primitives/region.hpp 2>/dev/null || true
      }
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    state: present
    backup: yes

- name: Install OpenCV
  block:
    - name: Run install.sh script
      ansible.builtin.shell:
        cmd: cd {{ jetson_script_dir }} && ./opencv_build.sh || echo "BUILD FAILED (OpenCV ${OPENCV_VERSION})"
      environment:
        OPENCV_VERSION: "{{ opencv_version }}"
        OPENCV_PYTHON: "{{ opencv_python }}"
        FORCE_BUILD: "{{ force_build }}"
        CUDA_ARCH_BIN: "{{ cuda_arch_bin }}"
  become: true

- name: Install range-v3 0.11.0
  block:
    - name: Define directory name
      set_fact:
        range_v3_directory: "{{ ansible_env.HOME }}/range-v3"
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ range_v3_directory }}"
        state: directory
    - name: Download and extract range-v3 0.11.0 source
      ansible.builtin.unarchive:
        src: https://github.com/ericniebler/range-v3/archive/refs/tags/0.11.0.tar.gz
        dest: "{{ range_v3_directory }}"
        remote_src: true
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ range_v3_directory }}/range-v3-0.11.0/build"
        state: directory
    - name: Run cmake
      ansible.builtin.command:
        cmd: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc ..
        chdir: "{{ range_v3_directory }}/range-v3-0.11.0/build"
      environment:
        PATH: /usr/local/cuda/bin:{{ ansible_env.PATH }}
    - name: Install range-v3
      ansible.builtin.command:
        cmd: make -j7 install
        chdir: "{{ range_v3_directory }}/range-v3-0.11.0/build"
      become: true

- name: Check ROS install directory existence
  ansible.builtin.stat:
    path: "{{ ros_root_dir }}/install"
  register: ros_install_dir_exist

- name: Build ROS2 Humble
  block:
    - name: Add the ROS deb repo to the apt sources list
      block:
        - name: Install apt packages
          ansible.builtin.apt:
            name:
              - curl
              - wget
              - gnupg2
              - lsb-release
              - ca-certificates
            install_recommends: false
            update_cache: true
        - name: Download ros.key
          ansible.builtin.command:
            cmd: curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        - name: "TODO: add name"
          ansible.builtin.shell:
            cmd: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
      become: true
    - name: Install apt packages
      ansible.builtin.apt:
        name:
          - apt-utils
          - build-essential
          - cmake
          - git
          - libbullet-dev
          - libpython3-dev
          - python3-colcon-common-extensions
          - python3-flake8
          - python3-pip
          - python3-numpy
          - python3-pytest-cov
          - python3-rosdep
          - python3-setuptools
          - python3-vcstool
          - python3-rosinstall-generator
          - libasio-dev
          - libtinyxml2-dev
          - libcunit1-dev
          - libpugixml-dev
          - libgeographic-dev
          - libgtest-dev
          - libcgal-dev
          - libfmt-dev
        install_recommends: false
        update_cache: true
      become: true
    - name: Install pip packages
      ansible.builtin.pip:
        name:
          - argcomplete
          - flake8-blind-except
          - flake8-builtins
          - flake8-class-newline
          - flake8-comprehensions
          - flake8-deprecated
          - flake8-docstrings
          - flake8-import-order
          - flake8-quotes
          - pytest-repeat
          - pytest-rerunfailures
          - pytest
          - scikit-build
          - cmake
        extra_args: --upgrade --no-cache-dir
      become: true
    - name: Install EmPy with specific version
      ansible.builtin.pip:
        name:
          - empy==3.3.4
        extra_args: --no-cache-dir
      become: true
    # - name: Could NOT find Python3 workaround
    #   ansible.builtin.apt:
    #     name:
    #       - python3.9
    #       - libpython3.9*
    #     purge: true
    #     state: absent
    #   become: true
    - name: Create the ROS root directory and src directory
      ansible.builtin.file:
        path: "{{ ros_root_dir }}/src"
        state: directory
        recurse: true
      become: true
    - name: Download ROS packages
      ansible.builtin.shell:
        cmd: rosinstall_generator --deps --rosdistro {{ ros_distro }} {{ ros_pkg }} launch_xml launch_yaml launch_testing launch_testing_ament_cmake demo_nodes_cpp demo_nodes_py example_interfaces camera_calibration_parsers camera_info_manager cv_bridge v4l2_camera vision_opencv libstatistics_collector geographic_msgs vision_msgs image_geometry image_pipeline image_transport compressed_image_transport compressed_depth_image_transport pcl_msgs perception_pcl logging_demo udp_msgs angles diagnostics tf_transformations mrt_cmake_modules gtest_vendor  grid_map filters nav2_msgs tf2-eigen ament_cmake_clang_format > {{ ros_root_dir }}/ros2.{{ ros_distro }}.{{ ros_pkg }}.rosinstall
      become: true
    - name: Import packages to source directory
      ansible.builtin.shell:
        cmd: vcs import src < ros2.humble.ros_base.rosinstall
        chdir: "{{ ros_root_dir }}"
      become: true
    - name: Install dependencies with rosdep
      block:
        - name: Check if rosdep sources.list file exists
          ansible.builtin.stat:
            path: /etc/ros/rosdep/sources.list.d/20-default.list
          register: rosdep_list_file
        - name: Initialize rosdep
          ansible.builtin.shell:
            cmd: rosdep init
          become: true
          when: not rosdep_list_file.stat.exists
        - name: Update rosdep
          ansible.builtin.shell:
            cmd: rosdep update
        - name: Run rosdep
          shell: rosdep install -y --ignore-src --from-paths src --rosdistro humble --skip-keys 'libopencv-dev python3-catkin-pkg-modules python3-rosdistro-modules libignition-math6-dev rti-connext-dds-6.0.1 ignition-math6'
          args:
            chdir: "{{ ros_root_dir }}"
    - name: Colcon build
      ansible.builtin.command:
        cmd: colcon build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=Release
        chdir: "{{ ros_root_dir }}"
      become: true
    - name: Remove build files
      block:
        - name: Remove .rosinstall file
          ansible.builtin.file:
            path: ros2.{{ ros_distro }}.{{ ros_pkg }}.rosinstall
            state: absent
        - name: Remove source directory
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/src"
            state: absent
        - name: Remove log directory
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/logs"
            state: absent
        - name: Remove build directory
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/build"
            state: absent
        - name: Remove .rosinstall files
          ansible.builtin.file:
            path: "{{ ros_root_dir }}/*.rosinstall"
            state: absent
      become: true
    - name: Clean up apt
      block:
        - name: Remove
          ansible.builtin.file:
            path: /var/lib/apt/lists/*
            state: absent
        - name: Apt-get clean
          ansible.builtin.apt:
            clean: true
      become: true
  when: not ros_install_dir_exist.stat.exists

- name: Add sourcing command in user's bashrc
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    state: present
    marker: "# {mark} ros2"
    block: |
      source {{ ros_root_dir }}/install/setup.bash
  when: not ros_install_dir_exist.stat.exists

- name: Install extra edge-auto-jetson dependency
  ansible.builtin.apt:
    name: libtheora-dev
    install_recommends: false
    update_cache: true
  become: true
