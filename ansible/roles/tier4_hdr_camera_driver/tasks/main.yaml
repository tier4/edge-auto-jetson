- name: Get file info from GitHub repository
  ansible.builtin.uri:
    url: "{{ camera_driver_repo }}"
  register: github_api_return_info

- name: Parse download URL for driver
  loop: "{{ github_api_return_info.json.assets }}"
  ansible.builtin.set_fact:
    driver_deb_download_url: "{{ item.browser_download_url }}"
    driver_deb_name: "{{ item.name }}"
  when: item.name | regex_search('tier4-camera-gmsl_(.+)_arm64.deb')

- name: Parse download URL for SDK
  loop: "{{ github_api_return_info.json.assets }}"
  ansible.builtin.set_fact:
    sdk_deb_download_url: "{{ item.browser_download_url }}"
    sdk_deb_name: "{{ item.name }}"
  when: item.name | regex_search('t4cam_sdk-(.+)-rqx58g.deb')

- name: Download driver deb file from public repo
  ansible.builtin.uri:
    url: "{{ driver_deb_download_url }}"
    dest: "{{ camera_driver_download_dir }}/{{ driver_deb_name }}"
    mode: 0644

- name: Download SDK deb file from public repo
  ansible.builtin.uri:
    url: "{{ sdk_deb_download_url }}"
    dest: "{{ camera_driver_download_dir }}/{{ sdk_deb_name }}"
    mode: 0644
  when: sdk_deb_download_url is defined

- name: Install apt packages
  become: true
  ansible.builtin.apt:
    name:
      - make
      - build-essential
      - debhelper
      - debmake
      - devscripts
      - dkms
    update_cache: true

- name: Setup camera driver and SDK
  become: true
  block:
    - name: Install driver from deb file
      ansible.builtin.apt:
        deb: "{{ camera_driver_download_dir }}/{{ driver_deb_name }}"
        state: present
    - name: Install SDK from deb file
      ansible.builtin.apt:
        deb: "{{ camera_driver_download_dir }}/{{ sdk_deb_name }}"
        state: present
      when: sdk_deb_download_url is defined

- name: Verify overlay file exists
  loop: "{{ overlay_files | dict2items }}"
  ansible.builtin.stat:
    path: /boot/{{ item.value }}
  register: overlay_stat
  failed_when: not overlay_stat.stat.exists

- name: Ensure extlinux.conf exists
  ansible.builtin.stat:
    path: /boot/extlinux/extlinux.conf
  register: extlinux_stat
  failed_when: not extlinux_stat.stat.exists

- name: Create new extlinux entry
  become: true
  loop: "{{ overlay_files | dict2items }}"
  ansible.builtin.blockinfile:
    path: /boot/extlinux/extlinux.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR {{ item.key }}"
    block: |
      LABEL {{ item.key }}
              MENU LABEL Custom Header Config: {{ item.key }}
              LINUX /boot/Image
              INITRD /boot/initrd
              FDT /boot/dtb/{{ dtb_file }}
              OVERLAYS /boot/{{ item.value }}
              APPEND ${cbootargs} {{ extlinux_append }}
    state: present
    create: true
    mode: "0644"

- name: Set DEFAULT extlinux entry
  block:
  - name: Check item existence
    lineinfile:
      dest: "/boot/extlinux/extlinux.conf"
      regexp: ^(.*)DEFAULT primery(.*)$
      state: absent
    check_mode: true
    changed_when: false
    register: does_exist
    when: default_entry is defined
    become: true

  - name: Modify
    lineinfile:
      dest: "/boot/extlinux/extlinux.conf"
      regexp: ^(.*)DEFAULT primery(.*)$
      line: DEFAULT primery_{{ default_entry }}
      backrefs: true
    when: does_exist.found and default_entry is defined
    become: true

- name: Setup C1 configuration
  block:
    - name: "{{ block_name }} : Change trigger mode to Fsync mode"
      include_tasks: mod_or_add.yaml
      vars:
        target_item: trigger_mode
        target_val: "1"
    # Set the same value to min/mid/max exposure time
    # so that exposure time can be estimated under any brightness condition
    - name: "{{ block_name }} : Fix exposure time"
      block:
        - name: "{{ block_name }} : Set min exposure"
          include_tasks: mod_or_add.yaml
          vars:
            target_item: shutter_time_min
            target_val: "{{ exposure_time }}"
        - name: "{{ block_name }} : Set mid exposure"
          include_tasks: mod_or_add.yaml
          vars:
            target_item: shutter_time_mid
            target_val: "{{ exposure_time }}"
        - name: "{{ block_name }} : Set max exposure"
          include_tasks: mod_or_add.yaml
          vars:
            target_item: shutter_time_max
            target_val: "{{ exposure_time }}"
  vars:
    target_file: /etc/modprobe.d/tier4-isx021.conf
    config_prefix: options tier4_isx021
    block_name: ISX021 configuration

- name: Setup C2 configuration
  block:
    - name: "{{ block_name }} : Change trigger mode to Fsync mode"
      include_tasks: mod_or_add.yaml
      vars:
        target_item: trigger_mode
        target_val: "1"

    # Set the same value to min/mid/max exposure time
    # so that exposure time can be estimated under any brightness condition
    - name: "{{ block_name }} : Fix exposure time"
      block:
        - name: "{{ block_name }} : Set min exposure"
          include_tasks: mod_or_add.yaml
          vars:
            target_item: shutter_time_min
            target_val: "{{ exposure_time }}"
        - name: "{{ block_name }} : Set mid exposure"
          include_tasks: mod_or_add.yaml
          vars:
            target_item: shutter_time_mid
            target_val: "{{ exposure_time }}"
        - name: "{{ block_name }} : Set max exposure"
          include_tasks: mod_or_add.yaml
          vars:
            target_item: shutter_time_max
            target_val: "{{ exposure_time }}"
  vars:
    target_file: /etc/modprobe.d/tier4-imx490.conf
    config_prefix: options tier4_imx490
    block_name: IMX490 configuration
